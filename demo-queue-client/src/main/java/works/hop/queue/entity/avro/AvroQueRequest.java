/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package works.hop.queue.entity.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class AvroQueRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroQueRequest\",\"namespace\":\"works.hop.queue.entity.avro\",\"fields\":[{\"name\":\"requestTime\",\"type\":\"long\"},{\"name\":\"clientId\",\"type\":{\"type\":\"record\",\"name\":\"AvroClientId\",\"fields\":[{\"name\":\"hostName\",\"type\":\"string\"},{\"name\":\"ipAddress\",\"type\":\"string\"}]}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AvroRequestType\",\"symbols\":[\"CONNECT\",\"REQUEST\",\"CLOSE\"]}},{\"name\":\"payload\",\"type\":\"string\"}]}");
    private static final long serialVersionUID = -4749998266440842242L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<AvroQueRequest> ENCODER =
            new BinaryMessageEncoder<AvroQueRequest>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<AvroQueRequest> DECODER =
            new BinaryMessageDecoder<AvroQueRequest>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<AvroQueRequest>
            WRITER$ = (org.apache.avro.io.DatumWriter<AvroQueRequest>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<AvroQueRequest>
            READER$ = (org.apache.avro.io.DatumReader<AvroQueRequest>) MODEL$.createDatumReader(SCHEMA$);
    private long requestTime;
    private works.hop.queue.entity.avro.AvroClientId clientId;
    private works.hop.queue.entity.avro.AvroRequestType type;
    private java.lang.CharSequence payload;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public AvroQueRequest() {
    }

    /**
     * All-args constructor.
     *
     * @param requestTime The new value for requestTime
     * @param clientId    The new value for clientId
     * @param type        The new value for type
     * @param payload     The new value for payload
     */
    public AvroQueRequest(java.lang.Long requestTime, works.hop.queue.entity.avro.AvroClientId clientId, works.hop.queue.entity.avro.AvroRequestType type, java.lang.CharSequence payload) {
        this.requestTime = requestTime;
        this.clientId = clientId;
        this.type = type;
        this.payload = payload;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<AvroQueRequest> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<AvroQueRequest> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<AvroQueRequest> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<AvroQueRequest>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a AvroQueRequest from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a AvroQueRequest instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static AvroQueRequest fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new AvroQueRequest RecordBuilder.
     *
     * @return A new AvroQueRequest RecordBuilder
     */
    public static AvroQueRequest.Builder newBuilder() {
        return new AvroQueRequest.Builder();
    }

    /**
     * Creates a new AvroQueRequest RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new AvroQueRequest RecordBuilder
     */
    public static AvroQueRequest.Builder newBuilder(AvroQueRequest.Builder other) {
        if (other == null) {
            return new AvroQueRequest.Builder();
        } else {
            return new AvroQueRequest.Builder(other);
        }
    }

    /**
     * Creates a new AvroQueRequest RecordBuilder by copying an existing AvroQueRequest instance.
     *
     * @param other The existing instance to copy.
     * @return A new AvroQueRequest RecordBuilder
     */
    public static AvroQueRequest.Builder newBuilder(AvroQueRequest other) {
        if (other == null) {
            return new AvroQueRequest.Builder();
        } else {
            return new AvroQueRequest.Builder(other);
        }
    }

    /**
     * Serializes this AvroQueRequest to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return requestTime;
            case 1:
                return clientId;
            case 2:
                return type;
            case 3:
                return payload;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                requestTime = (java.lang.Long) value$;
                break;
            case 1:
                clientId = (works.hop.queue.entity.avro.AvroClientId) value$;
                break;
            case 2:
                type = (works.hop.queue.entity.avro.AvroRequestType) value$;
                break;
            case 3:
                payload = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'requestTime' field.
     *
     * @return The value of the 'requestTime' field.
     */
    public long getRequestTime() {
        return requestTime;
    }

    /**
     * Sets the value of the 'requestTime' field.
     *
     * @param value the value to set.
     */
    public void setRequestTime(long value) {
        this.requestTime = value;
    }

    /**
     * Gets the value of the 'clientId' field.
     *
     * @return The value of the 'clientId' field.
     */
    public works.hop.queue.entity.avro.AvroClientId getClientId() {
        return clientId;
    }

    /**
     * Sets the value of the 'clientId' field.
     *
     * @param value the value to set.
     */
    public void setClientId(works.hop.queue.entity.avro.AvroClientId value) {
        this.clientId = value;
    }

    /**
     * Gets the value of the 'type' field.
     *
     * @return The value of the 'type' field.
     */
    public works.hop.queue.entity.avro.AvroRequestType getType() {
        return type;
    }

    /**
     * Sets the value of the 'type' field.
     *
     * @param value the value to set.
     */
    public void setType(works.hop.queue.entity.avro.AvroRequestType value) {
        this.type = value;
    }

    /**
     * Gets the value of the 'payload' field.
     *
     * @return The value of the 'payload' field.
     */
    public java.lang.CharSequence getPayload() {
        return payload;
    }

    /**
     * Sets the value of the 'payload' field.
     *
     * @param value the value to set.
     */
    public void setPayload(java.lang.CharSequence value) {
        this.payload = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeLong(this.requestTime);

        this.clientId.customEncode(out);

        out.writeEnum(this.type.ordinal());

        out.writeString(this.payload);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.requestTime = in.readLong();

            if (this.clientId == null) {
                this.clientId = new works.hop.queue.entity.avro.AvroClientId();
            }
            this.clientId.customDecode(in);

            this.type = works.hop.queue.entity.avro.AvroRequestType.values()[in.readEnum()];

            this.payload = in.readString(this.payload instanceof Utf8 ? (Utf8) this.payload : null);

        } else {
            for (int i = 0; i < 4; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.requestTime = in.readLong();
                        break;

                    case 1:
                        if (this.clientId == null) {
                            this.clientId = new works.hop.queue.entity.avro.AvroClientId();
                        }
                        this.clientId.customDecode(in);
                        break;

                    case 2:
                        this.type = works.hop.queue.entity.avro.AvroRequestType.values()[in.readEnum()];
                        break;

                    case 3:
                        this.payload = in.readString(this.payload instanceof Utf8 ? (Utf8) this.payload : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for AvroQueRequest instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroQueRequest>
            implements org.apache.avro.data.RecordBuilder<AvroQueRequest> {

        private long requestTime;
        private works.hop.queue.entity.avro.AvroClientId clientId;
        private works.hop.queue.entity.avro.AvroClientId.Builder clientIdBuilder;
        private works.hop.queue.entity.avro.AvroRequestType type;
        private java.lang.CharSequence payload;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(AvroQueRequest.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.requestTime)) {
                this.requestTime = data().deepCopy(fields()[0].schema(), other.requestTime);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.clientId)) {
                this.clientId = data().deepCopy(fields()[1].schema(), other.clientId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (other.hasClientIdBuilder()) {
                this.clientIdBuilder = works.hop.queue.entity.avro.AvroClientId.newBuilder(other.getClientIdBuilder());
            }
            if (isValidValue(fields()[2], other.type)) {
                this.type = data().deepCopy(fields()[2].schema(), other.type);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.payload)) {
                this.payload = data().deepCopy(fields()[3].schema(), other.payload);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing AvroQueRequest instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(AvroQueRequest other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.requestTime)) {
                this.requestTime = data().deepCopy(fields()[0].schema(), other.requestTime);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.clientId)) {
                this.clientId = data().deepCopy(fields()[1].schema(), other.clientId);
                fieldSetFlags()[1] = true;
            }
            this.clientIdBuilder = null;
            if (isValidValue(fields()[2], other.type)) {
                this.type = data().deepCopy(fields()[2].schema(), other.type);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.payload)) {
                this.payload = data().deepCopy(fields()[3].schema(), other.payload);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'requestTime' field.
         *
         * @return The value.
         */
        public long getRequestTime() {
            return requestTime;
        }


        /**
         * Sets the value of the 'requestTime' field.
         *
         * @param value The value of 'requestTime'.
         * @return This builder.
         */
        public AvroQueRequest.Builder setRequestTime(long value) {
            validate(fields()[0], value);
            this.requestTime = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'requestTime' field has been set.
         *
         * @return True if the 'requestTime' field has been set, false otherwise.
         */
        public boolean hasRequestTime() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'requestTime' field.
         *
         * @return This builder.
         */
        public AvroQueRequest.Builder clearRequestTime() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'clientId' field.
         *
         * @return The value.
         */
        public works.hop.queue.entity.avro.AvroClientId getClientId() {
            return clientId;
        }


        /**
         * Sets the value of the 'clientId' field.
         *
         * @param value The value of 'clientId'.
         * @return This builder.
         */
        public AvroQueRequest.Builder setClientId(works.hop.queue.entity.avro.AvroClientId value) {
            validate(fields()[1], value);
            this.clientIdBuilder = null;
            this.clientId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'clientId' field has been set.
         *
         * @return True if the 'clientId' field has been set, false otherwise.
         */
        public boolean hasClientId() {
            return fieldSetFlags()[1];
        }

        /**
         * Gets the Builder instance for the 'clientId' field and creates one if it doesn't exist yet.
         *
         * @return This builder.
         */
        public works.hop.queue.entity.avro.AvroClientId.Builder getClientIdBuilder() {
            if (clientIdBuilder == null) {
                if (hasClientId()) {
                    setClientIdBuilder(works.hop.queue.entity.avro.AvroClientId.newBuilder(clientId));
                } else {
                    setClientIdBuilder(works.hop.queue.entity.avro.AvroClientId.newBuilder());
                }
            }
            return clientIdBuilder;
        }

        /**
         * Sets the Builder instance for the 'clientId' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public AvroQueRequest.Builder setClientIdBuilder(works.hop.queue.entity.avro.AvroClientId.Builder value) {
            clearClientId();
            clientIdBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'clientId' field has an active Builder instance
         *
         * @return True if the 'clientId' field has an active Builder instance
         */
        public boolean hasClientIdBuilder() {
            return clientIdBuilder != null;
        }

        /**
         * Clears the value of the 'clientId' field.
         *
         * @return This builder.
         */
        public AvroQueRequest.Builder clearClientId() {
            clientId = null;
            clientIdBuilder = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'type' field.
         *
         * @return The value.
         */
        public works.hop.queue.entity.avro.AvroRequestType getType() {
            return type;
        }


        /**
         * Sets the value of the 'type' field.
         *
         * @param value The value of 'type'.
         * @return This builder.
         */
        public AvroQueRequest.Builder setType(works.hop.queue.entity.avro.AvroRequestType value) {
            validate(fields()[2], value);
            this.type = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'type' field has been set.
         *
         * @return True if the 'type' field has been set, false otherwise.
         */
        public boolean hasType() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'type' field.
         *
         * @return This builder.
         */
        public AvroQueRequest.Builder clearType() {
            type = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'payload' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getPayload() {
            return payload;
        }


        /**
         * Sets the value of the 'payload' field.
         *
         * @param value The value of 'payload'.
         * @return This builder.
         */
        public AvroQueRequest.Builder setPayload(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.payload = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'payload' field has been set.
         *
         * @return True if the 'payload' field has been set, false otherwise.
         */
        public boolean hasPayload() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'payload' field.
         *
         * @return This builder.
         */
        public AvroQueRequest.Builder clearPayload() {
            payload = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public AvroQueRequest build() {
            try {
                AvroQueRequest record = new AvroQueRequest();
                record.requestTime = fieldSetFlags()[0] ? this.requestTime : (java.lang.Long) defaultValue(fields()[0]);
                if (clientIdBuilder != null) {
                    try {
                        record.clientId = this.clientIdBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("clientId"));
                        throw e;
                    }
                } else {
                    record.clientId = fieldSetFlags()[1] ? this.clientId : (works.hop.queue.entity.avro.AvroClientId) defaultValue(fields()[1]);
                }
                record.type = fieldSetFlags()[2] ? this.type : (works.hop.queue.entity.avro.AvroRequestType) defaultValue(fields()[2]);
                record.payload = fieldSetFlags()[3] ? this.payload : (java.lang.CharSequence) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










